stages:
  - machine_admin_account_setup
  - package_installation
  - pre_setup
  - test
  - app_clone
  - app_config
  - build
  - deploy
  - post_deploy

variables:
  UN: "user"
  HD: "/home/$UN"
  HOST: "api.domain.com"
  ADMIN_EMAIL: "admin@domain.com"
  ADMIN_PASS: "password"
  STATIC_URL: "/static/"
  MEDIA_URL: "/media/"
  PGDBHOST: "localhost"
  DBPORT: 5432
  GQL_PORT: 9000
  API_PORT: 8000
  APIURI: "graphql"
  VERSION: "main"
  SAME_HOST: "no"
  APP_HOST: "dashboard.domain.com"
  APP_MOUNT_URI: "app.domain.com"
  TEST_ACCOUNT_CONFIRM_REDIRECT_URL: "dashboard.domain.comaccount-confirm"
  TEST_STAFF_CONFIRM_REDIRECT_URL: "dashboard.domain.comnew-password"
  DB_URL: "postgres://$PGSQLUSER:$PGSQLUSERPASS@$PGDBHOST:$DBPORT/$PGSQLDBNAME"
  EMAIL_URL: "smtp://$EMAIL:$EMAIL_PW@$EMAIL_HOST:/?ssl=True"
  C_HOSTS: "$HOST,$APP_HOST,$TEST_ACCOUNT_CONFIRM_REDIRECT_URL,$TEST_STAFF_CONFIRM_REDIRECT_URL,localhost,127.0.0.1"
  A_HOSTS: "$HOST,$APP_HOST,localhost,127.0.0.1"
  QL_ORIGINS: "$HOST,$APP_HOST,localhost,127.0.0.1"
  NODE_VERSION: "v16.20.2"
  PYTHON: $HD/env/saleor/bin/python
  PIP: $HD/env/saleor/bin/pip
  VENV: $HD/env/saleor
  PYTHON_VER: "3.9.18"
  PGSQLDBNAME: saleor
  PGSQLUSER: saleor
  PGSQLUSERPASS: saleor

machine_admin_account_setup:
  stage: machine_admin_account_setup
  image: valudio/docker-sshpass:latest
  when: manual
  script:
    - echo "user ALL=(ALL) NOPASSWD:ALL" > ./sudoers_user
    - sshpass -p $PASS scp -o StrictHostKeychecking=no ./sudoers_user user@$SERVER:/tmp
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "echo $PASS | sudo -S bash -c 'rm -rf /etc/sudoers.d/user'"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "echo $PASS | sudo -S bash -c 'mv /tmp/sudoers_user /etc/sudoers.d/user'"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "echo $PASS | sudo -S chown root:root /etc/sudoers.d/user"

package_installation:
  stage: package_installation
  image: valudio/docker-sshpass:latest
  when: manual
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo apt-get update"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo apt-get install -y build-essential python3-dev python3-pip python3-cffi python3.9-venv gcc"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo apt-get install -y libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info libpq-dev"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo apt-get install -y postgresql postgresql-contrib nginx redis"

postgresql_setup:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  when: manual
  variables:
    PGSQLDBNAME: saleor
    PGSQLUSER: saleor
    PGSQLUSERPASS: saleor
    CREATE_USER_CMD: CREATE ROLE $PGSQLUSER PASSWORD '$PGSQLUSERPASS' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;
  before_script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "systemctl list-units --full -all | grep -Fq 'postgresql' && sudo systemctl restart postgresql.service"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "systemctl list-units --full -all | grep -Fq 'celery' && sudo systemctl stop celery.service"
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -i -u postgres psql -c 'DROP DATABASE IF EXISTS $PGSQLDBNAME;'"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -i -u postgres psql -c 'DROP ROLE IF EXISTS $PGSQLUSER;'"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -i -u postgres psql -c \"CREATE ROLE $PGSQLUSER PASSWORD '$PGSQLUSERPASS' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;\""
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -i -u postgres psql -c 'CREATE DATABASE saleor;'"

secret_key_setup:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  when: manual
  variables:
    PGSQLDBNAME: saleor
    PGSQLUSER: user
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf /etc/saleor"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo mkdir /etc/saleor"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "echo $(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 2048| head -n 1) | sudo dd status=none of=/etc/saleor/api_sk"

firewall_setup:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  when: manual
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo ufw allow $GQL_PORT"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo ufw allow $API_PORT"

python_virtual_environment_setup:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  when: manual
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf $HD/env"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -u $UN mkdir $HD/env"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -u $UN python3.9 -m venv $HD/env/saleor"

mailpit_setup:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  when: manual
  script:
# Reset mailpit
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "systemctl list-units --full -all | grep -Fq 'mailpit' && sudo systemctl stop mailpit"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo bash < <(curl -sL https://raw.githubusercontent.com/axllent/mailpit/develop/install.sh)"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf /etc/systemd/system/mailpit.service"
# Configure mailpit
    - sshpass -p $PASS scp deploy/mailpit.service user@$SERVER:/tmp
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo mv /tmp/mailpit.service /etc/systemd/system/mailpit.service"
# Start mailpit
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo systemctl enable mailpit.service"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo systemctl restart mailpit.service"

nginx_config_setup:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  when: manual
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf /etc/nginx/sites-available/saleor_server_block"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf /etc/nginx/sites-enabled/saleor_server_block "
    - sed "s|{hd}|$HD|g; s/{host}/$HOST/g; s|{static}|$STATIC_URL|g; s|{media}|$MEDIA_URL|g" deploy/server_block.template | dd status=none of=deploy/saleor_server_block
    - sshpass -p $PASS scp deploy/saleor_server_block user@$SERVER:/tmp
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo mv /tmp/saleor_server_block /etc/nginx/sites-available/saleor_server_block"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo ln -s /etc/nginx/sites-available/saleor_server_block /etc/nginx/sites-enabled/"

nginx_ssl_setup:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  when: manual
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf /etc/nginx/ssl"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo mkdir /etc/nginx/ssl"
    - sshpass -p $PASS scp deploy/nginx.conf user@$SERVER:/tmp
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf /etc/nginx/nginx.conf"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo mv /tmp/nginx.conf /etc/nginx/nginx.conf"
    - |
      sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "
      sudo tee -a /etc/nginx/ssl/domain.com.crt > /dev/null <<EOT
      $DOMAIN_COM_CRT
      EOT
      "
    - |
      sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "
      sudo tee -a /etc/nginx/ssl/domain.com.key > /dev/null <<EOT
      $DOMAIN_COM_KEY
      EOT
      "
nvm_install:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  when: manual
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "cd /tmp curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "source $HD/.nvm/nvm.sh && nvm install $NODE_VERSION"

unit_test:
  stage: test
  image: python:3.9.18
  rules:
    - if: $RUN_TEST == "true"
      when: always
    - when: never
  services:
    - name: postgres
      alias: db
  variables:
    POSTGRES_DB: $PGSQLDBNAME
    POSTGRES_USER: $PGSQLUSER
    POSTGRES_PASSWORD: $PGSQLUSERPASS
    DATABASE_URL: "postgres://$PGSQLUSER:$PGSQLUSERPASS@db/$PGSQLDBNAME"
  script:
    - pip install poetry==1.7.0
    - poetry install --no-root
    - poetry run pytest -m "not e2e" --cov --cov-report= --junitxml=junit/test-results.xml --django-db-bench=./queries-results.json

lint:
  stage: test
  image: python:3.9.18
  rules:
    - if: $RUN_TEST == "true"
      when: always
    - when: never
  script:
    - pip install poetry==1.7.0
    - poetry install --no-root
    - poetry run pre-commit run --all

e2e_test:
  stage: test
  image: python:3.9.18
  rules:
    - if: $RUN_TEST == "true"
      when: always
    - when: never
  services:
    - name: postgres
      alias: db
  variables:
    POSTGRES_DB: $PGSQLDBNAME
    POSTGRES_USER: $PGSQLUSER
    POSTGRES_PASSWORD: $PGSQLUSERPASS
    DATABASE_URL: "postgres://$PGSQLUSER:$PGSQLUSERPASS@db/$PGSQLDBNAME"
  script:
    - pip install poetry==1.7.0
    - poetry install --no-root
    - poetry run pytest -m "e2e"

saleor_repo_clone_setup:
  stage: app_clone
  image: valudio/docker-sshpass:latest
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf $HD/saleor"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -u $UN git clone https://github.com/JoeHO888/saleor.git"

saleor_environment_variables_setup:
  stage: app_config
  image: valudio/docker-sshpass:latest
  script:
    - sed "s|{dburl}|$DB_URL|; s|{emailurl}|$EMAIL_URL|; s/{chosts}/$C_HOSTS/; s/{ahosts}/$A_HOSTS/; s/{host}/$HOST/g; s|{static}|$STATIC_URL|g; s|{media}|$MEDIA_URL|g; s/{adminemail}/$ADMIN_EMAIL/; s/{gqlorigins}/$QL_ORIGINS/" deploy/template.env > deploy/.env
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf $HD/saleor/.env"
    - sshpass -p $PASS scp deploy/.env user@$SERVER:$HD/saleor/.env

gunicorn_setup:
  stage: app_config
  image: valudio/docker-sshpass:latest
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo mkdir -p /var/log/gunicorn"
    - sshpass -p $PASS scp deploy/log.conf user@$SERVER:$HD/saleor
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf $HD/run"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -u $UN mkdir $HD/run"

build_saleor:
  stage: build
  image: valudio/docker-sshpass:latest
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "$PYTHON --version"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "$PYTHON -m pip install --upgrade pip"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "$PIP install Django"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "$PIP install gunicorn"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "$PIP install uvicorn"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "$PIP install poetry==1.7.0"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "source $VENV/bin/activate && cd $HD/saleor && poetry env remove --all && poetry -C $HD/saleor install --no-root && deactivate"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "$PIP install python-decouple"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "cd $HD/saleor && $PYTHON manage.py migrate"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "cd $HD/saleor && rm -rf $HD/saleor/static && $PYTHON manage.py collectstatic"
# Replace npm run with explict python command
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "cd $HD/saleor && $PYTHON manage.py get_graphql_schema > saleor/graphql/schema.graphql"
#     - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "source $HD/.nvm/nvm.sh && nvm use $NODE_VERSION && cd $HD/saleor && npm install"
#     - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "source $VENV/bin/activate && source $HD/.nvm/nvm.sh && nvm use $NODE_VERSION && cd $HD/saleor && npm run build-schema"

celery_service_setup:
  stage: deploy
  image: valudio/docker-sshpass:latest
  script:
    - sed "s/{un}/$UN/; s|{hd}|$HD|g" deploy/celery.template.service > deploy/celery.service
    - sshpass -p $PASS scp -o StrictHostKeychecking=no deploy/celery.service user@$SERVER:/tmp
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo mv /tmp/celery.service /etc/systemd/system/celery.service"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo systemctl enable celery.service"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo systemctl restart celery.service"

saleor_service_setup:
  stage: deploy
  image: valudio/docker-sshpass:latest
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo rm -rf /etc/systemd/system/saleor.service"
    - sed "s/{un}/$UN/; s|{hd}|$HD|g" deploy/saleor.template.service | dd status=none of=deploy/saleor.service
    - sshpass -p $PASS scp deploy/saleor.service user@$SERVER:/tmp
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo mv /tmp/saleor.service /etc/systemd/system/saleor.service"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo systemctl enable saleor.service"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo systemctl restart saleor.service"

nginx_service_setup:
  stage: deploy
  image: valudio/docker-sshpass:latest
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo systemctl enable nginx.service"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo systemctl reload nginx.service"

create_admin_user:
  stage: post_deploy
  image: valudio/docker-sshpass:latest
  when: manual
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "export DJANGO_SUPERUSER_PASSWORD=$SUPER_USER_PASSWORD && cd $HD/saleor && $PYTHON manage.py createsuperuser --email admin@example.com --no-input"

populate_db:
  stage: post_deploy
  image: valudio/docker-sshpass:latest
  when: manual
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "cd $HD/saleor && $PYTHON manage.py populatedb"
