stages:
  - package_installation
  - pre_setup

variables:
  HOST: "api.domain.com"
  ADMIN_EMAIL: "admin@domain.com"
  ADMIN_PASS: "password"
  STATIC_URL: "/static/"
  MEDIA_URL: "/media/" 
  PGDBHOST: "localhost"
  DBPORT: 5432
  GQL_PORT: 9000
  API_PORT: 8000
  APIURI: "graphql"
  VERSION: "main"
  SAME_HOST: "no"
  APP_HOST: "dashboard.domain.com"
  APP_MOUNT_URI: "app.domain.com"
  TEST_ACCOUNT_CONFIRM_REDIRECT_URL: "dashboard.domain.comaccount-confirm"
  TEST_STAFF_CONFIRM_REDIRECT_URL: "dashboard.domain.comnew-password"  

package_installation:
  stage: package_installation
  image: valudio/docker-sshpass:latest
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo apt-get update" 
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo apt-get install -y build-essential python3-dev python3-pip python3-cffi python3.9-venv gcc" 
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo apt-get install -y libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info libpq-dev" 
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo apt-get install -y postgresql postgresql-contrib nginx redis"             

postgresql_setup:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  variables:
    PGSQLDBNAME: saleor
    PGSQLUSER: saleor
    PGSQLUSERPASS: saleor
    CREATE_USER_CMD: CREATE ROLE $PGSQLUSER PASSWORD '$PGSQLUSERPASS' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;
  before_script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "systemctl list-units --full -all | grep -Fq 'postgresql' && sudo systemctl restart postgresql.service"    
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "systemctl list-units --full -all | grep -Fq 'celery' && sudo systemctl stop celery.service"        
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -i -u postgres psql -c 'DROP DATABASE IF EXISTS $PGSQLDBNAME;'"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -i -u postgres psql -c 'DROP ROLE IF EXISTS $PGSQLUSER;'"
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -i -u postgres psql -c \"CREATE ROLE $PGSQLUSER PASSWORD '$PGSQLUSERPASS' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;\""
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo -i -u postgres psql -c 'CREATE DATABASE saleor;'"

secret_key_setup:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  variables:
    PGSQLDBNAME: saleor
    PGSQLUSER: user
  before_script:
    - |
      sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no '
      if [ ! -d "/etc/saleor" ]; then
        sudo mkdir /etc/saleor
      else
        # Does the key file exist?
        if [ -f "/etc/saleor/api_sk" ]; then
                # Yes, remove it.
                sudo rm /etc/saleor/api_sk
        fi
      fi'
  script:
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "echo $(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 2048| head -n 1) | sudo dd status=none of=/etc/saleor/api_sk"                     

firewall_setup:
  stage: pre_setup
  image: valudio/docker-sshpass:latest
  script: 
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo ufw allow $GQL_PORT"      
    - sshpass -p $PASS ssh user@$SERVER -t -o StrictHostKeychecking=no "sudo ufw allow $API_PORT"    
